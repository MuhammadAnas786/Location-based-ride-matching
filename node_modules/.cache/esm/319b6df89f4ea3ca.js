let getDriver,rideMatch,constants,WriteToFile;_9f4‍.x([["default",()=>_9f4‍.o]]);_9f4‍.w("../Algorithm/rideMatch",[["getDriver",["getDriver"],function(v){getDriver=v}],["rideMatch",["rideMatch"],function(v){rideMatch=v}]]);_9f4‍.w("../Helpers/constants",[["constants",["constants"],function(v){constants=v}]]);_9f4‍.w("../util",[["WriteToFile",["WriteToFile"],function(v){WriteToFile=v}]]);


const passangersHandler = {
  findDriver: async function (userData) {
    try {
      let result = {
        driver:false,
        data:{}
      }
      let driver = await getDriver(userData.location)
      if(driver.found){
        result.driver = true
        result.data = driver.driver
        return result
      }
    } catch (err) {
      _9f4‍.g.console.log(err)
      throw err
    }
  },
  addJourney: async function (userData,driverData) {
    try {
       
      let journeys = await getFile(constants.JOURNEY)
     let newObj = {
        "starting_point":userData.starting_point,
        "ending_point":userData.ending_point,
        "route":'N/A',
        "passanger":userData.username,
        "isActive":true,
        "hasDriverNotified":false
      }

      if(journeys[driverData.username].length>0)
        journeys[driverData.username].push(newObj)
      else
        journeys = {...journeys,[driverData.username]:[{...newObj}]};
      
      await WriteToFile(journeys,constants.JOURNEY)
      return newObj
      

  } catch (err) {
    _9f4‍.g.console.log(err);
    throw err
  }
  }
};
_9f4‍.d(passangersHandler);